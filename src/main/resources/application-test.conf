akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    allow-java-serialization = on
    provider = "cluster"
    serialize-messages = off
    warn-about-java-serializer-usage = off

    serializers {
      java = "akka.serialization.JavaSerializer"
    }
    serialization-bindings {
      "com.flutter.akka.actors.classic.Account$Deposit" = java
      "com.flutter.akka.actors.classic.Account$Withdraw" = java
      "com.flutter.akka.actors.classic.Account$GetBalance" = java
      "com.flutter.akka.actors.classic.Publisher$Publish" = java
      "com.flutter.akka.actors.classic.Publisher$Published" = java
    }

    debug {
      receive = true
      autoreceive = true
      lifecycle = true
    }
  }
  remote.artery {
    canonical {
        hostname = "127.0.0.1"
        port = 2551
    }
  }
  cluster {
    metrics.enabled = off
    seed-nodes = ["akka://AccountStream@127.0.0.1:2551",
                  "akka://AccountStream@127.0.0.1:2552",
                  "akka://AccountStream@127.0.0.1:2553"]

    singleton {
    }

  }
  remote.artery.enabled = true

  persistence {
    journal.plugin = "akka.persistence.journal.inmem"
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    snapshot-store.local.dir = "target/snapshots"
  }

}
